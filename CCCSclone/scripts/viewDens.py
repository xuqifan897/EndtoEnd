import os
import numpy as np
import h5py
import matplotlib.pyplot as plt

def viewDens():
    resultFolder = '/data/qifan/projects/EndtoEnd/results/CCCSclone/results'
    texFile = os.path.join(resultFolder, 'texDens_log.bin')
    resultFile = os.path.join(resultFolder, 'density.bin')
    dataType = np.float32
    texArray = np.fromfile(texFile, dtype=dataType)
    resultArray = np.fromfile(resultFile, dtype=dataType)
    diff = np.sum(np.abs(texArray - resultArray))
    print(diff)


def viewDose():
    """
    After generating the dose from the CCCS clone project, 
    we'll take a look at the dose matrices generated
    """
    resultFolder = '/data/qifan/projects/EndtoEnd/results/CCCSclone/results'
    beam0Folder = os.path.join(resultFolder, 'beam0')
    nBeamlets = 81
    shape = (101, 101, 101)

    # output
    beam0vis = os.path.join(resultFolder, 'beam0vis');
    if (not os.path.isdir(beam0vis)):
        os.mkdir(beam0vis)

    for i in range(nBeamlets):
        beamletVis = os.path.join(beam0vis, 'beamlet{}'.format(i))
        if not os.path.isdir(beamletVis):
            os.mkdir(beamletVis)
        beamletArrayFile = os.path.join(beam0Folder, 'beamlet{}.bin'.format(i))
        beamletArray = np.fromfile(beamletArrayFile, dtype=np.float32)
        beamletArray = np.reshape(beamletArray, shape)
        print(np.max(beamletArray))


def viewIntermediate():
    """
    After I viewed the dose using the code above, there seemed to be something 
    wrong. So I began debugging, ang checking intermediate variables
    """
    resultFolder = '/data/qifan/projects/EndtoEnd/results/CCCSComp'
    shape = (800, 800, 800)
    debugFolder = os.path.join(resultFolder, 'new')
    REVDoseFile = os.path.join(debugFolder, 'REVDose.bin')
    REVDose = np.fromfile(REVDoseFile, dtype=np.float32)
    REVDose = np.reshape(REVDose, shape)
    print(np.max(REVDose))

    REVTermaFile = os.path.join(debugFolder, 'REVTerma.bin')
    REVTerma = np.fromfile(REVTermaFile, dtype=np.float32)
    REVTerma = np.reshape(REVTerma, shape)
    print(np.max(REVTerma))

    REVDensFile = os.path.join(debugFolder, 'REVDens.bin')
    REVDens = np.fromfile(REVDensFile, dtype=np.float32)
    REVDens = np.reshape(REVDens, shape)
    print(np.max(REVDens))


def viewComp():
    """
    This function compares the density and Terma 
    data generated by the old and new examples
    """
    result_old = '/data/qifan/projects/EndtoEnd/results/CCCSComp/old'
    result_new = '/data/qifan/projects/EndtoEnd/results/CCCSComp/new'
    shape = (800, 800, 800)
    # compare density
    if True:
        density_old_file = os.path.join(result_old, 'REVDens.bin')
        density_old = np.fromfile(density_old_file, dtype=np.float32)
        density_old = np.reshape(density_old, shape)
        density_new_file = os.path.join(result_new, 'REVDens.bin')
        density_new = np.fromfile(density_new_file, dtype=np.float32)
        density_new = np.reshape(density_new, shape)
        diff = np.sum(np.abs(density_old - density_new))
        print("density difference: {}".format(diff))
        print("the maximum value of each: old: {}, new: {}\n".format(np.max(density_old), np.max(density_new)))

    if True:
        terma_old_file = os.path.join(result_old, 'REVTerma.bin')
        terma_old = np.fromfile(terma_old_file, dtype=np.float32)
        terma_old = np.reshape(terma_old, shape)
        terma_new_file = os.path.join(result_new, 'REVTerma.bin')
        terma_new = np.fromfile(terma_new_file, dtype=np.float32)
        terma_new = np.reshape(terma_new, shape)
        diff = np.sum(np.abs(terma_old - terma_new))
        print("Terma difference: {}".format(diff))
        print("the maximum value of each: old: {}, new: {}\n".format(np.max(terma_old), np.max(terma_new)))

    if True:
        dose_old_file = os.path.join(result_old, 'REVDose.bin')
        dose_old = np.fromfile(dose_old_file, dtype=np.float32)
        dose_old = np.reshape(dose_old, shape)
        dose_new_file = os.path.join(result_new, 'REVDose.bin')
        dose_new = np.fromfile(dose_new_file, dtype=np.float32)
        dose_new = np.reshape(dose_new, shape)
        diff = np.sum(np.abs(dose_old - dose_new))
        print("REV Dose difference: {}".format(diff))
        print("the maximum value of each: old: {}, new: {}\n".format(np.max(dose_old), np.max(dose_new)))

    if True:
        shape = [241, 529, 511]
        BEV_dose_old_file = os.path.join(result_old, 'BEVDose.bin')
        BEV_dose_old = np.fromfile(BEV_dose_old_file, dtype=np.float32)
        BEV_dose_old = np.reshape(BEV_dose_old, shape)
        BEV_dose_new_file = os.path.join(result_new, 'BEVDose.bin')
        BEV_dose_new = np.fromfile(BEV_dose_new_file, dtype=np.float32)
        BEV_dose_new = np.reshape(BEV_dose_new, shape)
        diff = np.sum(np.abs(BEV_dose_old - BEV_dose_new))
        print("BEV Dose difference: {}".format(diff))
        print("the maximum value of each: old: {:.4f}, new: {:.4f}\n".format(np.max(BEV_dose_old), np.max(BEV_dose_new)))


def viewTexDens():
    """
    Compares the density texture of the old and new implementations
    """
    result_old = '/data/qifan/projects/EndtoEnd/results/CCCSComp/old'
    result_new = '/data/qifan/projects/EndtoEnd/results/CCCSComp/new'
    shape = (103, 103, 103)
    texDens_old_file = os.path.join(result_old, 'texDens_log.bin')
    texDens_old = np.fromfile(texDens_old_file, dtype=np.float32)
    texDens_old = np.reshape(texDens_old, shape)
    texDens_new_file = os.path.join(result_new, 'texDens_log.bin')
    texDens_new = np.fromfile(texDens_new_file, dtype=np.float32)
    texDens_new = np.reshape(texDens_new, shape)
    diff = np.sum(np.abs(texDens_old - texDens_new))
    print("texDens difference: {}".format(diff))
    print("the maximum value of each: old: {}, new: {}".format(np.max(texDens_old), np.max(texDens_new)))


def view_g_coords():
    """
    compare the coordinates used for terma interpolation
    """
    result_old = '/data/qifan/projects/EndtoEnd/results/CCCSComp/old'
    result_new = '/data/qifan/projects/EndtoEnd/results/CCCSComp/new'
    shape = (800, 800, 800, 3)
    g_coords_old_file = os.path.join(result_old, 'g_coords.bin')
    g_coords_old = np.fromfile(g_coords_old_file, dtype=np.float32)
    g_coords_old = np.reshape(g_coords_old, shape)

    g_coords_new_file = os.path.join(result_new, 'g_coords.bin')
    g_coords_new = np.fromfile(g_coords_new_file, dtype=np.float32)
    g_coords_new = np.reshape(g_coords_new, shape)

    diff = g_coords_old - g_coords_new
    print(np.sum(np.abs(diff)))
    
    # find the maximum difference
    diff_norm = np.sum(np.abs(diff), axis=3)
    max_index = np.unravel_index(np.argmax(diff_norm), diff_norm.shape)
    print("index: {}".format(max_index))
    print("old: {}".format(g_coords_old[max_index[0], max_index[1], max_index[2], :]))
    print("new: {}".format(g_coords_new[max_index[0], max_index[1], max_index[2], :]))


def REVDoseDebug():
    """
    To read the debug logout in REV dose calculation
    """
    result_new = '/data/qifan/projects/EndtoEnd/results/CCCSComp/new'
    shape = (800, 800, 800)
    debugFile = os.path.join(result_new, 'REVDebug.bin')
    # debugFile = os.path.join(result_new, 'REVDoseSurf.bin')
    array = np.fromfile(debugFile, dtype=np.float32)
    array = np.reshape(array, shape)
    # maximum value
    max_value = np.max(array)
    print("maximum value: {}".format(max_value))
    # count the number of nan
    nan_count = np.sum(array == np.nan)
    print("number of invalid values: {}".format(nan_count))
    # count non-zero values
    zero_count = np.sum(array != 0.0)
    print("number of non-zero values: {}".format(zero_count))
    print("sum: {}".format(np.sum(array)))
    
    # get the index of non-zero values:
    indice_x, indice_y, indice_z = np.nonzero(array)
    first_idx = [indice_x[0], indice_y[0], indice_z[0]]
    print(first_idx, array[first_idx[0], first_idx[1], first_idx[2]])


    revDoseFile = os.path.join(result_new, 'REVDose.bin')
    revDose = np.fromfile(revDoseFile, dtype=np.float32)
    print("REV Dose maximum value: {}".format(np.max(revDose)))


def check_BEVDose():
    """
    This function checks the result of the BEV dose
    """
    result_new = "/data/qifan/projects/EndtoEnd/results/CCCSComp/new"
    BEVDoseFile = os.path.join(result_new, 'BEVDose.bin')
    shape = (389, 142, 389)
    BEVDoseNew = np.fromfile(BEVDoseFile, dtype=np.float32)
    BEVDoseNew = np.reshape(BEVDoseNew, shape)
    print(np.max(BEVDoseNew))


def checkResultSample():
    """
    This function checks the result of a single beamlet dose
    """
    new_result_folder = "/data/qifan/projects/EndtoEnd/results/CCCSclone/results/beam0"
    matrixShape = (101, 101, 101)
    fullShape = (103, 103, 103)
    old_result_file = "/data/qifan/projects/EndtoEnd/results/CCCSclone/Dose_Coefficients.h5"
    nBeamlets = 1

    for beamletIdx in range(nBeamlets):
        # get new result
        beamletFile = os.path.join(new_result_folder, 'beamlet{}'.format(beamletIdx))
        beamletNew_ = np.fromfile(beamletFile, dtype=np.float32)
        beamletNew_ = np.reshape(beamletNew_, matrixShape)
        beamletNew = np.zeros(fullShape, dtype=np.float32)
        beamletNew[1:-1, 1:-1, 1:-1] = beamletNew_

        beamletOld = getCCCSBeamletDose(old_result_file, fullShape, beamletIdx)
        diff = np.sum(np.abs(beamletNew - beamletOld))
        roofOld = np.max(beamletOld)
        roofNew = np.max(beamletNew)
        print("peak value of old result: {:.4e}".format(roofOld))
        print("peak value of new reuslt: {:.4e}\n".format(roofNew))
        print("sum value of old result: {:.4e}".format(np.sum(beamletOld)))
        print("sum value of new result: {:.4e}\n".format(np.sum(beamletNew)))
        print("summed absolute difference: {:.4e}".format(diff))
        print("discrepancy: {:.4e}".format(diff / np.sum(beamletOld)))


def print_hdf5_structure(item, indent=0):
    """
    Recursively print the structure of HDF5 file.
    """
    if isinstance(item, h5py.File) or isinstance(item, h5py.Group):
        for key, value in item.items():
            print("  " * indent + f"Group: {key}")
            print_hdf5_structure(value, indent + 1)
    elif isinstance(item, h5py.Dataset):
        print("  " * indent + f"Dataset: {item.name}")


def getCCCSBeamletDose(file, shape, idx):
    """
    This function gets the dose of the beamlet of index 'idx'
    """
    dataset = h5py.File(file, 'r')
    # print(list(dataset.keys()))

    dataset = dataset['beams']
    # print(list(dataset.keys()))

    dataset = dataset['data']
    # print(list(dataset.keys()))

    dataset = dataset['beam_00000']
    # print(list(dataset.keys()))

    beamletName = 'beamlet_{:05d}'.format(idx)
    beamlet = dataset[beamletName]
    # print(list(dataset.keys()))
    coeffs = beamlet['coeffs'][()]
    lindex = beamlet['lindex'][()]
    size = shape[0] * shape[1] * shape[2]
    CCCSDose = np.zeros(size, dtype=np.float32)
    for key, value in zip(lindex, coeffs):
        CCCSDose[key] = value
    CCCSDose = np.reshape(CCCSDose, shape)
    return CCCSDose


def print_dose():
    """
    This function prints a cross-section of the dose into an image
    """
    matrixShape = (101, 101, 101)
    fullShape = (103, 103, 103)
    beamletFile = "/data/qifan/projects/EndtoEnd/"\
        "results/CCCSclone/results/beam0/beamlet40"
    beamletNew_ = np.fromfile(beamletFile, dtype=np.float32)
    beamletNew_ = np.reshape(beamletNew_, matrixShape)
    beamletNew = np.zeros(fullShape, dtype=np.float32)
    beamletNew[1:-1, 1:-1, 1:-1] = beamletNew_

    # get a cross-section
    cross_section = beamletNew[:, 50, :]
    if False:
        image = "./scripts/transverse.png"
        plt.imsave(image, cross_section)

    # calculate centroid
    coords = np.arange(cross_section.shape[0])
    coords_x = np.expand_dims(coords, axis=1)
    coords_y = np.expand_dims(coords, axis=0)
    idx_x = np.sum(cross_section * coords_x) / np.sum(cross_section)
    idx_y = np.sum(cross_section * coords_y) / np.sum(cross_section)

    idx_y = int(np.round(idx_y))
    slice = beamletNew[:, :, idx_y]
    slice = np.transpose(slice, axes=(1, 0))
    if True:
        image = "./scripts/longitudinal.png"
        plt.imsave(image, slice)


if __name__ == '__main__':
    # viewDens()
    # viewDose()
    # viewIntermediate()
    # viewComp()
    # viewTexDens()
    # view_g_coords()
    # REVDoseDebug()
    # check_BEVDose()
    # checkResultSample()
    print_dose()