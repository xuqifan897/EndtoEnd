import os
import numpy as np
import matplotlib.pyplot as plt
import h5py

def PreprocessVerification():
    """
    This function takes a look at the content generated by the preprocess step
    """
    tmpFolder = '/tmp/dosecalc/qifan'
    resultFolder = '/data/qifan/projects/EndtoEnd/results/CCCSclone'
    if False:
       # Check the file roi_list.h5 
       roiFile = os.path.join(tmpFolder, 'roi_list.h5')
       with h5py.File(roiFile, 'r') as file:
            ROIs = list(file.keys())
            for roi in ROIs:
               struct = file[roi]
               ArrayProps = struct['ArrayProps']
               size = ArrayProps.attrs['size']
               crop_size = ArrayProps.attrs['crop_size']
               crop_start = ArrayProps.attrs['crop_start']
               mask = struct['mask'][()]
               shape = (103, 102, 102)
               mask = np.reshape(mask, shape)
            # write mask
            maskFolder = os.path.join(resultFolder, 'mask')
            if not os.path.isdir(maskFolder):
                os.mkdir(maskFolder)
            for i in range(shape[2]):
                slice = mask[:, :, i]
                slice = np.uint8(slice * 255)
                sliceFile = os.path.join(maskFolder, '{:03d}.png'.format(i+1))
                plt.imsave(sliceFile, slice)
    
    if False:
        # check the fluence map
        fluence_map_folder = os.path.join(tmpFolder, 'fluence_maps')
        fluence_map_file = os.path.join(fluence_map_folder, 'fmap-000000.raw')
        beamShape = (9, 9)
        beamArray = np.fromfile(fluence_map_file, dtype=np.float32)
        beamArray = np.reshape(beamArray, beamShape)
        print(beamArray)
    
    if True:
        # check the isotropic density
        densityFile = os.path.join(tmpFolder, 'density.raw')
        density = np.fromfile(densityFile, dtype=np.float32)
        shape = (103, 103, 103)
        # x, y, z
        density = np.reshape(density, shape)
        densityFolder = os.path.join(resultFolder, 'density')
        if not os.path.isdir(densityFolder):
            os.mkdir(densityFolder)
        for i in range(shape[2]):
            slice = density[:, :, i].copy()
            slice /= np.max(slice)
            slice = np.transpose(slice, (1, 0))
            sliceFile = os.path.join(densityFolder, 'slice{:03d}.png'.format(i+1))
            plt.imsave(sliceFile, slice)
    
    if False:
        # check the convolution phi and theta angles
        conv_theta_deg_file = os.path.join(tmpFolder, 'convolution_theta_angles.raw')
        conv_theta_deg = np.fromfile(conv_theta_deg_file, dtype=np.float32)
        print('theta angles: ', conv_theta_deg)
        conv_phi_deg_file = os.path.join(tmpFolder, 'convolution_phi_angles.raw')
        conv_phi_deg = np.fromfile(conv_phi_deg_file, dtype=np.float32)
        print('phi angles: ', conv_phi_deg)
    
    if False:
        # check the cumulative kernel
        cumulative_kernel_file = os.path.join(tmpFolder, 'cumulative_kernel.h5')
        with h5py.File(cumulative_kernel_file, 'r') as file:
            kernel_file = file.attrs['kernel_file']
            nradii = file.attrs['nradii']
            ntheta = file.attrs['ntheta']
            radial_boundaries_cm = file.attrs['radial_boundaries_cm']
            angular_boundaries_deg = file.attrs['angular_boundaries_deg']
            total_weights = file['total_weights'][()]
            weights = file['weights'][()]
            print('great!')
    
    if False:
        # check the kernel data
        spectra_dir = '/data/qifan/projects/EndtoEnd/CCCS/data/dsa'
        files = ['scaf200', 'scaf300', 'scaf400', 'scaf500', 'scaf600', 
            'scaf800', 'scaf1000', 'scaf1250', 'scaf1500', 'scaf2000', 
            'scaf3000', 'scaf4000', 'scaf5000', 'scaf6000']
        for file in files:
            fullfile = os.path.join(spectra_dir, file)
            with open(fullfile, 'r') as f:
                lines = f.readlines()
            print('great!')
            

def explore_group(group, indent=""):
    for item_name in group:
        item = group[item_name]
        if isinstance(item, h5py.Group):
            print(f"{indent}Group: {item_name}")
            explore_group(item, indent + "  ")
        elif isinstance(item, h5py.Dataset):
            print(f"{indent}Dataset: {item_name}")

if __name__ == '__main__':
    PreprocessVerification()